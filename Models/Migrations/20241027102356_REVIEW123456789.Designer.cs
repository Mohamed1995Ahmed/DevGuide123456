// <auto-generated />
using System;
using DevGuide.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20241027102356_REVIEW123456789")]
    partial class REVIEW123456789
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevGuide.Models.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BadgeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("User_Answer_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Question_Id");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentType")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("Session_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Session_Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User_Instructor_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.HasIndex("User_Instructor_Id");

                    b.ToTable("Query");
                });

            modelBuilder.Entity("DevGuide.Models.Models.QueryAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeveloper")
                        .HasColumnType("bit");

                    b.Property<int>("Query_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Query_Id");

                    b.ToTable("QueryAnswer");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quiz_Id")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Quiz_Id");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Number_Of_Questions")
                        .HasColumnType("int");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Session_Id")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Session_Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User_Instructor_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.HasIndex("User_Instructor_Id");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A platform for building mobile and desktop web applications",
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A JavaScript library for building user interfaces",
                            Name = "React"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A progressive JavaScript framework for building user interfaces",
                            Name = "Vue.js"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A JavaScript runtime built on Chrome's V8 JavaScript engine",
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A cross-platform, high-performance framework for building modern, cloud-based applications",
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A modern, object-oriented programming language developed by Microsoft",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A high-level programming language used for building large-scale applications",
                            Name = "Java"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A high-level, interpreted programming language known for its simplicity",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A high-level Python Web framework that encourages rapid development",
                            Name = "Django"
                        },
                        new
                        {
                            Id = 10,
                            Description = "A lightweight WSGI web application framework in Python",
                            Name = "Flask"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A server-side web application framework written in Ruby",
                            Name = "Ruby on Rails"
                        },
                        new
                        {
                            Id = 12,
                            Description = "A versatile language for building interactive web applications",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 13,
                            Description = "A strongly typed programming language that builds on JavaScript",
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 14,
                            Description = "The standard markup language for creating web pages",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = 15,
                            Description = "A style sheet language used for describing the look of a document",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 16,
                            Description = "A preprocessor scripting language that is interpreted or compiled into CSS",
                            Name = "Sass"
                        },
                        new
                        {
                            Id = 17,
                            Description = "A popular front-end open-source toolkit for developing with HTML, CSS, and JS",
                            Name = "Bootstrap"
                        },
                        new
                        {
                            Id = 18,
                            Description = "A domain-specific language used for managing relational databases",
                            Name = "SQL"
                        },
                        new
                        {
                            Id = 19,
                            Description = "An open-source relational database management system",
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = 20,
                            Description = "An advanced, open-source relational database system",
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            Id = 21,
                            Description = "A document-based, distributed database built for modern applications",
                            Name = "MongoDB"
                        },
                        new
                        {
                            Id = 22,
                            Description = "A platform developed by Google for creating mobile and web applications",
                            Name = "Firebase"
                        },
                        new
                        {
                            Id = 23,
                            Description = "A platform for developing, shipping, and running applications in containers",
                            Name = "Docker"
                        },
                        new
                        {
                            Id = 24,
                            Description = "An open-source container orchestration system for automating deployment",
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = 25,
                            Description = "A distributed version control system for tracking changes in source code",
                            Name = "Git"
                        },
                        new
                        {
                            Id = 26,
                            Description = "A web-based interface for Git, offering source code management",
                            Name = "GitHub"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Microsoft's cloud computing service",
                            Name = "Azure"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Amazon's cloud computing service platform",
                            Name = "AWS"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Google's cloud computing service",
                            Name = "Google Cloud"
                        },
                        new
                        {
                            Id = 30,
                            Description = "A free, cross-platform, open-source developer platform for building apps",
                            Name = ".NET"
                        },
                        new
                        {
                            Id = 31,
                            Description = "A powerful and intuitive programming language for macOS, iOS, watchOS, and tvOS",
                            Name = "Swift"
                        },
                        new
                        {
                            Id = 32,
                            Description = "A modern programming language that makes developers happier",
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 33,
                            Description = "A popular general-purpose scripting language that is especially suited to web development",
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 34,
                            Description = "A PHP framework for web artisans",
                            Name = "Laravel"
                        },
                        new
                        {
                            Id = 35,
                            Description = "A Java-based framework used to create stand-alone applications",
                            Name = "Spring Boot"
                        },
                        new
                        {
                            Id = 36,
                            Description = "An open-source machine learning framework",
                            Name = "TensorFlow"
                        },
                        new
                        {
                            Id = 37,
                            Description = "An open-source machine learning library based on the Torch library",
                            Name = "PyTorch"
                        },
                        new
                        {
                            Id = 38,
                            Description = "A cross-platform game engine",
                            Name = "Unity"
                        },
                        new
                        {
                            Id = 39,
                            Description = "A game engine developed by Epic Games",
                            Name = "Unreal Engine"
                        });
                });

            modelBuilder.Entity("DevGuide.Models.Models.SocialAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SocialLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialName")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("User_SocialAccounts");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Support", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ObjectOfComplain")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Support");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CV")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("YearsOfExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DevGuide.Models.Models.User_Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Option_Id")
                        .HasColumnType("int");

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Quiz_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Option_Id");

                    b.HasIndex("Question_Id");

                    b.HasIndex("User_Quiz_Id");

                    b.ToTable("User_Answer");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User_Badges", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Badge_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Badge_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("User_Badges");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User_Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("QuizCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quiz_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Quiz_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("User_Quiz");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User_Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Skill_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Skill_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("User_Skills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "16e77a15-7a22-40dd-9184-a3c19a913432",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "267d3884-d7d9-4aa3-b6f1-9cda61b3a291",
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = "8549a4f4-ecc4-4dd2-a9c8-52efb395ec3d",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = "6beebd9f-41e6-4868-a590-19645dbabe3d",
                            Name = "Mentor",
                            NormalizedName = "MENTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("TillNow")
                        .HasColumnType("bit");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("Models.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("TillNow")
                        .HasColumnType("bit");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Option", b =>
                {
                    b.HasOne("DevGuide.Models.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("Question_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Payment", b =>
                {
                    b.HasOne("DevGuide.Models.Models.Session", "Session")
                        .WithOne("Payment")
                        .HasForeignKey("DevGuide.Models.Models.Payment", "Session_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.User", null)
                        .WithMany("Payments")
                        .HasForeignKey("UserId");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Query", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Queries")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.User", "User_Instructor")
                        .WithMany("InstructedQueries")
                        .HasForeignKey("User_Instructor_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("User_Instructor");
                });

            modelBuilder.Entity("DevGuide.Models.Models.QueryAnswer", b =>
                {
                    b.HasOne("DevGuide.Models.Models.Query", "Query")
                        .WithMany("QueryAnswers")
                        .HasForeignKey("Query_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Question", b =>
                {
                    b.HasOne("DevGuide.Models.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("Quiz_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Review", b =>
                {
                    b.HasOne("DevGuide.Models.Models.Session", "Session")
                        .WithOne("Review")
                        .HasForeignKey("DevGuide.Models.Models.Review", "Session_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Schedule", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Schedules")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Session", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.User", "User_Instructor")
                        .WithMany("InstructedSessions")
                        .HasForeignKey("User_Instructor_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("User_Instructor");
                });

            modelBuilder.Entity("DevGuide.Models.Models.SocialAccounts", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("SocialAccounts")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Support", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Supports")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User_Answer", b =>
                {
                    b.HasOne("DevGuide.Models.Models.Option", "Option")
                        .WithMany("UserAnswer")
                        .HasForeignKey("Option_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.Question", "Question")
                        .WithMany("User_Answers")
                        .HasForeignKey("Question_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.User_Quiz", "User_Quiz")
                        .WithMany("Answers")
                        .HasForeignKey("User_Quiz_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Question");

                    b.Navigation("User_Quiz");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User_Badges", b =>
                {
                    b.HasOne("DevGuide.Models.Models.Badge", "Badge")
                        .WithMany("Badges")
                        .HasForeignKey("Badge_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Badges")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User_Quiz", b =>
                {
                    b.HasOne("DevGuide.Models.Models.Quiz", "Quiz")
                        .WithMany("Users")
                        .HasForeignKey("Quiz_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Quizzes")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User_Skills", b =>
                {
                    b.HasOne("DevGuide.Models.Models.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("Skill_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevGuide.Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Models.Education", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Experience", b =>
                {
                    b.HasOne("DevGuide.Models.Models.User", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Badge", b =>
                {
                    b.Navigation("Badges");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Option", b =>
                {
                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Query", b =>
                {
                    b.Navigation("QueryAnswers");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("User_Answers");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Session", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("DevGuide.Models.Models.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("InstructedQueries");

                    b.Navigation("InstructedSessions");

                    b.Navigation("Payments");

                    b.Navigation("Queries");

                    b.Navigation("Quizzes");

                    b.Navigation("Reviews");

                    b.Navigation("Schedules");

                    b.Navigation("Sessions");

                    b.Navigation("Skills");

                    b.Navigation("SocialAccounts");

                    b.Navigation("Supports");
                });

            modelBuilder.Entity("DevGuide.Models.Models.User_Quiz", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
